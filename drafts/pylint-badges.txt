---
title: Generating Pylint Badges
---

Badges, on github and other code sharing sites, are a way to communicate
small snippets of information concerning the status of your repository.
They generally appear on your README file, so they are one of the first
things you see when you load a repository page.

On my [yawt][1] page, for example, you can see several badges for things
like my [travis][2] build status, and my GPA at [code climate][3].

One thing that I *couldn't* find, however, was a [pylint][4] badge - a
simple status that displayed your pylint score.  This surprised me; it
seemed like it should have been a common thing to want to do.  Indeed, I'm
still not 100% that I haven't simply overlooked something glaringly obvious.

But, alas, for whatever reason, I couldn't find one, and I haven't seen any
on the various python projects I'm come across.  So...I decided to make one.
It turns out that it's not hard.

The github badges that I've seen are mostly implemented in a similar
fashion.  There's a web endpoint of some sort which will receive and process
some information and another endpoint which will provide the badge image
itself.  The image is often a link to a some sort of page which summarizes
the status that the badge is representing.

In the case of travis, code climate and quantified code, there's an endpoint
which processes a github webhook, for example.  Whenever you push code to
github, these endpoints are notified and the status badges (or, at least,
the information used to render the status badges) are updated.  The README
will just display the latest badge, linked to a page specialized for each
service.

[Coveralls][5], a service for reporting test coverage, does something a bit
different.  For python code, it works off of *travis* (or some other
continuous integration service).  This makes sense because travis is already
used, in many cases, to run the tests (many projects will make passing tests
a required part of a successful build).  Travis will install the
application's dependencies, run the build, run the tests (collecting
coverage information at the same time), and then send the coverage stats to
coveralls for storage and perusal.  Sending the coverage data is
accomplished via a specialized web client that is easily downloaded via pip.
Its installation forms part of the travis set up procedure.

In my case, the goal was pretty simple: put a colour coded badge on my
README file that linked to the generated pylint report for the latest build.
This is a fairly similar situation to coveralls in that I needed to run a
program (pylint) against an environment that had all the project's
dependencies already installed.  So it made sense, in my case, to do
something similar to what coveralls was doing.

All the badges I've seen so far use the SVG format, and it's not hard to see
why - it's a variant of XML and hence easy to generate dynamically.  So the
first thing I did was reverse engineer my code climate badge to create a
pylint version.  The end result looks like this:

    :::xml
    <svg xmlns="http://www.w3.org/2000/svg" width="85" height="20">
        <linearGradient id="a" x2="0" y2="100%">
            <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
            <stop offset="1" stop-opacity=".1"/>
        </linearGradient>
        <!-- whole rectangle -->
        <rect rx="3" width="85" height="20" fill="#555"/>

        <!-- rating part -->
        <rect rx="3" x="50" width="35" height="20" fill="#44cc11"/>
        <path fill="#44cc11" d="M50 0h4v20h-4z"/>

        <!-- whole rectangle -->
        <rect rx="3" width="85" height="20" fill="url(#a)"/>

        <g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11">
            <text x="25" y="15" fill="#010101" fill-opacity=".3">pylint</text>
            <text x="25" y="14">pylint</text>
            <text x="67" y="15" fill="#010101" fill-opacity=".3">{0:.2f}</text>
            <text x="67" y="14">{0:.2f}</text>
        </g>
    </svg>

Note the {0:.2f} bits.  This is a python formatting code, to be replaced
with the actual pylint score.


[1]: https://github.com/drivet/yawt
[2]: https://travis-ci.org
[3]: https://codeclimate.com/
[4]: http://www.pylint.org/
[5]: https://coveralls.io/
