{"sourceUrl": "https://desmondrivet.com/2020/04/04/indieweb-conversation", "targetUrl": "https://desmondrivet.com/2020/02/12/website-identity", "parsedSource": {"items": [{"type": ["h-entry"], "properties": {"author": [{"type": ["h-card"], "properties": {"photo": ["https://desmondrivet.com/me02.jpg"], "name": ["Desmond Rivet"], "url": ["https://desmondrivet.com"], "published": ["2020-04-04T21:30:09-04:00"]}, "value": "Desmond Rivet"}], "url": ["https://desmondrivet.com/2020/04/04/indieweb-conversation"], "name": ["How to Have a Conversation on the IndieWeb"], "summary": ["In which I describe how to avoid solipsism on the #indieweb"], "content": [{"html": "<p>If you've read my <a href=\"/tags/indieweb\">previous articles</a> on the <a href=\"https://indieweb.org/\">IndieWeb</a>, you might be\nforgiven for thinking that its members are, by and large, loners who keep to\nthemselves.</p>\n<p>Consider the concept of a \"like\", for example.  On a site like Twitter, a\nlike is an <em>action</em> you perform against another person's content; you click\nthe heart icon next to someone's tweet, and the like counter for that tweet\ngoes up.  It's an implicit connection between two people - the one who did\nthe liking and the one who received it.</p>\n<p>An <a href=\"https://indieweb.org/like\">IndieWeb \"like\"</a>, on the other hand, is not an action you perform on\nsomeone's content, but rather a standalone post that you <em>own</em> and publish\nto your site.  It's a reversal of the way people usually think about the\ntransaction, and it reflects the premium IndieWeb members place on\ncontrolling their own content.</p>\n<p>Notably, in the simplest version of this scheme, the person who's post was\nliked - the likee, I guess? - might not even be aware that anything has\nhappened at all.  I mean, how would they?  The entire interaction was wholly\ncontained on another site.</p>\n<p>Which is all well and good but also a little...boring? Calling the IndieWeb\na \"social network\" seems like a bit of stretch when you don't even know how\nmany people liked your post.  What's the point of it all if you don't get to\nsee a little heart counter going up?</p>\n<p>The problem becomes more obvious when one realizes that the IndieWeb does\nnot prescribe the use of any particular blogging software or, indeed, any\nparticular publishing technology at all (other than the standard machinery\nof the web, like HTTP, HTML and CSS), so how exactly would one be able to\neven recognize that a piece of content on someone's website was a \"post\"\nthat could be \"replied to\" or \"liked\" at all?</p>\n<p>Of course, we wouldn't get very far if the IndieWeb community didn't have\nanswers to these questions.</p>\n<h2>How To Build a Decentralized Social Network</h2>\n<p>It's been said that the IndieWeb is what a social network looks like when\nit's built on top of the web itself, but what exactly does this mean?</p>\n<p>If you're a software developer, you've heard of <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\">REST</a>.  It's a software\narchitecture style defined in terms of distributed <a href=\"https://indieweb.org/representative_h-card\">web resources</a>\n(uniquely identified by URLs) and a small number of predefined actions or\nverbs that can be applied to those web resources - the same verbs, not\ncoincidentally, defined by HTTP (GET, POST, PUT, DELETE, etc).  The REST\nstyle is used extensively to provide access to distributed web-based data\nresources, often formatted as JSON.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Roy_Fielding\">Roy Fielding</a> is usually credited as the person who \"invented\" REST, but\nthat's not quite true.  It would be more accurate to say that he documented\na pre-existing architecture style - namely the one used by the classic world\nwide web.  The entire web is the prototypical REST system <em>par excellence</em>\nin this formulation, with hyperlinked HTML documents being the prototypical\nweb resources.</p>\n<p>I'm not personally accustomed to viewing the web in this fashion, because\nI'm more accustomed to thinking of RESTful services as providing access to\ndata resources, not HTML pages, and I would argue that the distinction is\nmore than just semantics.  Data resources, in my mind, have a regular,\npredictable structure that HTML pages lack.  Data resources represent things\nlike books and appointments and people and blog posts while HTML pages are\njust...pages.  They are primarily meant to be rendered in a browser and\nviewed by human beings and extracting any kind of structured data from them,\nwhile not impossible, tends to be tricky.</p>\n<p>And this puts the IndieWeb in a bit of bind.  The IndieWeb's basic unit of\ncommunication is the post and posts live on websites and websites consist of\nHTML pages and HTML pages, as I've already said, are not structured data\nresources.  So, how does one (programatically) extract a post from a website\nthat one has never visited before?  How does one distinguish notes from\narticles and likes?  These are questions that are readily answered if you're\ndesigning a private, walled social network, because you get to design the\ndata resources from the ground up.  You get to decide what a post looks\nlike, and the web resources involved in modelling one.  It's a lot harder to\ndo when you have to somehow extract that information in a predictable manner\nfrom the chaotic tag soup that forms the majority of personal websites.</p>\n<h2>Enter Microformats</h2>\n<p>So what can you do?  What exactly <em>does</em> a post look like on the IndieWeb?\nFinally we come to the answer, and it requires knowledge about a subject\ncalled <em><a href=\"https://indieweb.org/microformats\">microformats</a></em>.</p>\n<p>Microformats are basically just specialized CSS classes added to your HTML\ncontent in order to give consumers some idea of what that content\nrepresents.  They are effectively the API of the IndieWeb.  Different kinds\nof posts can be represented with different combinations of microformats.</p>\n<p>A standard blog entry (an <em><a href=\"https://indieweb.org/article\">article</a></em>, in IndieWeb parlance), might look\nlike this, for example:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"h-entry\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h1</span> <span class=\"na\">class=</span><span class=\"s\">\"p-name\"</span><span class=\"nt\">&gt;</span>Awesome Title<span class=\"nt\">&lt;h1&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"e-content\"</span><span class=\"nt\">&gt;</span>\n        This is a pretty good blog entry\n    <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n\n\n<p>The \"<a href=\"https://indieweb.org/h-entry\">h-entry</a>\" CSS class identifies the whole div as a generic post.\nThe \"p-name\" class identifies the h1 tag as the title of the post and the\n\"e-content\" class represents the article content itself.  We know this is a\n<em>blog entry</em> because of the title; blog entries are really nothing more then\nself-contained, standalone pieces of content with titles.</p>\n<p>(If you're curious about why microformat classes start with a certain\nletter, like h or p, you should read the <a href=\"http://microformats.org/wiki/microformats2\">standard</a>.  The specifics,\nwhile interesting, are not germane to this discussion).</p>\n<p>A <a href=\"https://indieweb.org/note\">note</a> (the IndieWeb equivalent of a tweet) looks more or less the\nsame as an article, but lacks a title:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"h-entry\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"e-content\"</span><span class=\"nt\">&gt;</span>\n        This is a pretty good note\n    <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n\n\n<p>IndieWeb <a href=\"https://indieweb.org/reply\">reply</a> posts are basically just notes with extra information\nto give the reply some context:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"h-entry\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">\"u-in-reply-to\"</span> <span class=\"na\">href=</span><span class=\"s\">\"http://elsewhere.com/posts/1234\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"e-content\"</span><span class=\"nt\">&gt;</span>\n        This is a pretty good reply\n    <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n\n\n<p>Note the telltale \"u-in-reply-to\" URL, which identifies this post as a\nreply, and points to the post that this reply is about.</p>\n<p>An IndieWeb like is very similar to an IndieWeb reply, but uses the\n\"u-like-of\" class instead of the \"u-in-reply-to\" class:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"h-entry\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">\"u-like-of\"</span> <span class=\"na\">href=</span><span class=\"s\">\"http://elsewhere.com/posts/1234\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"e-content\"</span><span class=\"nt\">&gt;</span>\n        This is a pretty good like\n    <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n\n\n<p>Though likes can contain content of their own, they often don't, so they can\noften be as simple as this:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"h-entry\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">\"u-like-of\"</span> <span class=\"na\">href=</span><span class=\"s\">\"http://elsewhere.com/posts/1234\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n\n\n<h2>From Microformats to JSON</h2>\n<p>Once you embed your posts with microformats, how does a 3rd party make use\nof the information?  They do it with a <em>microformat parser</em>.  Microformat\nparsers function by reading the special microformat classes from an HTML\ndocument and producing a canonical JSON representation of the extracted\ndata.  So, for example, this markup:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"h-entry\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h1</span> <span class=\"na\">class=</span><span class=\"s\">\"p-name\"</span><span class=\"nt\">&gt;</span>Awesome Title<span class=\"nt\">&lt;h1&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"e-content\"</span><span class=\"nt\">&gt;</span>\n        This is a pretty good blog entry\n    <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n\n\n<p>will produce this JSON:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"h-entry\"</span>\n      <span class=\"p\">],</span>\n      <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"Awesome Title\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"content\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span>\n            <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"This is a pretty good blog entry\"</span><span class=\"p\">,</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>according to rules defined by the standard.</p>\n<p>Bear in mind that any HTML element without an associated microformatted\nclass is effectively ignored by a microformat parser, so a post that looks\nlike this:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"o\">&lt;</span><span class=\"nv\">article</span> <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"s\">h-entry</span><span class=\"s2\">\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nv\">div</span> <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"s\">something-weird</span><span class=\"s2\">\"</span><span class=\"o\">&gt;</span>\n        <span class=\"nv\">This</span> <span class=\"nv\">isn</span><span class=\"s1\">'</span><span class=\"s\">t really part of the content</span>\n    <span class=\"o\">&lt;/</span><span class=\"nv\">div</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nv\">h1</span> <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"s\">p-name</span><span class=\"s2\">\"</span><span class=\"o\">&gt;</span><span class=\"nv\">Awesome</span> <span class=\"nv\">Title</span><span class=\"o\">&lt;</span><span class=\"nv\">h1</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nv\">span</span> <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"s\">wrap</span><span class=\"s2\">\"</span><span class=\"o\">&gt;</span><span class=\"nv\">Something</span> <span class=\"k\">else</span> <span class=\"nv\">here</span><span class=\"o\">&lt;/</span><span class=\"nv\">span</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nv\">div</span> <span class=\"nv\">class</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"s\">e-content</span><span class=\"s2\">\"</span><span class=\"o\">&gt;</span>\n        <span class=\"nv\">This</span> <span class=\"nv\">is</span> <span class=\"nv\">a</span> <span class=\"nv\">pretty</span> <span class=\"nv\">good</span> <span class=\"nv\">blog</span> <span class=\"nv\">entry</span>\n    <span class=\"o\">&lt;/</span><span class=\"nv\">div</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nv\">footer</span><span class=\"o\">&gt;</span>\n       <span class=\"nv\">This</span> <span class=\"nv\">is</span> <span class=\"nv\">an</span> <span class=\"nv\">awesome</span> <span class=\"nv\">footer</span>\n    <span class=\"o\">&lt;/</span><span class=\"nv\">footer</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"nv\">article</span><span class=\"o\">&gt;</span>\n</pre></div>\n\n\n<p>will produce exactly the same JSON as the post above.</p>\n<p>In other words, microformats are basically a way of embedding structured\ndata into an unstructured HTML page.  Effectively, microformats allow a\nvanilla, free form personal website to double as a RESTful data service.</p>\n<p>I'll say this again, because I think it's kind of cool: <em>microformats\ntransform a plain, vanilla, HTML-based personal website into a RESTful data\nservice</em>.</p>\n<p>I feel like Roy Fielding would be proud.</p>\n<h2>Counting Hearts</h2>\n<p>The process of liking a post on the IndieWeb, as I alluded to before, might\nseem like a very one-sided activity.  The liker publishes a special post on\ntheir own site which represents the \"like\" and that's pretty much that.  The\nlikee isn't really involved in the procedure.</p>\n<p>Except, of course, that if this were actually true, the IndieWeb web\nwouldn't be much of a social network.  So how exactly do you know how many\npeople liked your post?</p>\n<p>The answer involves a concept called <em><a href=\"https://indieweb.org/Webmention\">webmentions</a></em>.  A webmention is a\nway of notifying a website that another website has linked to it in some\nfashion.  The basic operation is as follows:</p>\n<ul>\n<li>Bob writes an article which links to an article on Alice's website.</li>\n<li>Bob publishes his article, and he (or the software he uses) sends a\n  webmention to an endpoint on Alice's domain, informing her that her\n  article was mentioned in Bob's post.</li>\n<li>Alice's endpoint does something with this information (perhaps recording\n  the fact in a database, for example).</li>\n</ul>\n<p>The webmention protocol is remarkably spare; the payload basically contains\nnothing but the source URL (doing the mentioning) and the target URL (being\nmentioned).  Notably absent is any sort of information about what kind of\npost is doing the mentioning.  Bob's post could have liked Alice's article,\nor it could have replied to it, or it could have just randomly linked to it;\nthe webmention payload is silent on the subject.</p>\n<p>Information about the post which sent the webmention must obtained by\nactually <em>reading</em> the post via the source URL, parsing its microformats,\nand confirming that the target URL actually appears somewhere in its\ncontents.  These extra steps function as form of validation; a valid\nwebmention <em>must</em> be backed by a real, published post or it will be\nsummarily rejected.  This step also allows the consumer of the source post\nto classify it according to its microformats.  This is ultimately how one\nimplements things such as like counters and comments on an IndieWeb site.</p>\n<h2>Here's My Card</h2>\n<p>Webmentions allow a website to know when a person has linked to your post\nand a further check can determine the nature of link (was it a like? A\nreply? A repost?).  Notably missing from the ongoing discussion is a crucial\npiece of the puzzle, namely the identity of the person doing the linking.</p>\n<p>Of course, what we <em>do</em> know is the website that did the linking, and if\nyou've read my <a href=\"https://desmondrivet.com/2020/02/12/website-identity\">previous article</a> on the subject, you know that one's\ndomain is basically one's identity on the IndieWeb, so we're halfway there.\nBut if you've used a service like Twitter, you know that this isn't really\nenough; one's personal domain is akin to one's Twitter handle, and although\nsuch information is crucial, it's usually augmented with things like a name\nand an avatar.  How do you provide things like that on the IndieWeb?</p>\n<p>The answer, once again, is microformats, but this time it's not an h-entry\non which we'll focus but rather a new class called an <a href=\"https://indieweb.org/h-card\">h-card</a>.  The\nh-card microformat functions roughly like an online business card; it's way\nof attaching personal information, like your name, email address and photo,\nto your personal domain.  A properly embedded h-card becomes especially\nimportant when you want your personal information to appear correctly in a\ncontext other than your own website - for example, when posting likes and\nreplies that you want displayed on other websites.</p>\n<p>Embedding an h-card in your posts is not difficult:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"h-entry\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">\"p-author h-card\"</span> <span class=\"na\">href=</span><span class=\"s\">\"http://example.com\"</span><span class=\"nt\">&gt;</span>Joe Bloggs<span class=\"nt\">&lt;/a&gt;</span>\n    <span class=\"nt\">&lt;h1</span> <span class=\"na\">class=</span><span class=\"s\">\"p-name\"</span><span class=\"nt\">&gt;</span>Awesome Title<span class=\"nt\">&lt;h1&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"e-content\"</span><span class=\"nt\">&gt;</span>\n        This is a pretty good blog entry\n    <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n\n\n<p>As you might expect, the p-author class tells a consumer who the author of\nthe post is, but it's the h-card class which tells you the format of that\ninformation.  This is a very minimal example, making use of a concept called\n<a href=\"http://microformats.org/wiki/microformats2-implied-properties\">implied properties</a>, which allows parsers to infer certain pieces of\ndata from the structure of the tags.  The result of parsing the h-card, in\nthis case, will look like this:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"h-card\"</span>\n      <span class=\"p\">],</span>\n      <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"Joe Bloggs\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"http://example.com\"</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>As you can see, the url attribute is inferred from the fact that the h-card\nis combined with an anchor tag, and the name attribute is inferred from the\ncontents of the tag.</p>\n<p>You can choose to be more specific with your h-cards:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"h-entry\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"h-card\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;img</span> <span class=\"na\">class=</span><span class=\"s\">\"u-photo\"</span> <span class=\"na\">src=</span><span class=\"s\">\"http://example.org/photo.png\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"\"</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">\"p-name u-url\"</span> <span class=\"na\">href=</span><span class=\"s\">\"http://example.org\"</span><span class=\"nt\">&gt;</span>Joe Bloggs<span class=\"nt\">&lt;/a&gt;</span>\n        <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">\"u-email\"</span> <span class=\"na\">href=</span><span class=\"s\">\"mailto:joebloggs@example.com\"</span><span class=\"nt\">&gt;</span>joebloggs@example.com<span class=\"nt\">&lt;/a&gt;</span>, \n    <span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;h1</span> <span class=\"na\">class=</span><span class=\"s\">\"p-name\"</span><span class=\"nt\">&gt;</span>Awesome Title<span class=\"nt\">&lt;h1&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"e-content\"</span><span class=\"nt\">&gt;</span>\n        This is a pretty good blog entry\n    <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n\n\n<p>This results in the following parsed h-card:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"h-card\"</span>\n      <span class=\"p\">],</span>\n      <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"photo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"http://example.org/photo.png\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"Joe Bloggs\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"http://example.org\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"email\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"mailto:joebloggs@example.com\"</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>You can also choose to maintain a canonical or <a href=\"https://indieweb.org/representative_h-card\">representative h-card</a>\nwhich represents your <em>homepage</em>.  You do this by:</p>\n<ul>\n<li>Adding an h-card to your homepage</li>\n<li>Making sure that your homepage h-card contains a u-uid attribute to\n  represent the page itself.</li>\n</ul>\n<p>My representative h-card on my homepage looks like this, for example:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nt\">&lt;section</span> <span class=\"na\">class=</span><span class=\"s\">\"h-card\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;ul&gt;</span>\n        <span class=\"nt\">&lt;li&gt;</span>\n            <span class=\"nt\">&lt;img</span> <span class=\"na\">class=</span><span class=\"s\">\"u-photo\"</span> <span class=\"na\">src=</span><span class=\"s\">\"/me02.jpg\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li&gt;</span>\n            <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">\"p-name u-url u-uid\"</span> \n                <span class=\"na\">href=</span><span class=\"s\">\"https://desmondrivet.com\"</span><span class=\"nt\">&gt;</span>Desmond Rivet<span class=\"nt\">&lt;/a&gt;</span>\n        <span class=\"nt\">&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;li&gt;</span>\n            <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">\"u-email\"</span>\n               <span class=\"na\">href=</span><span class=\"s\">\"mailto:desmond.rivet@gmail.com\"</span><span class=\"nt\">&gt;</span>desmond.rivet@gmail.com<span class=\"nt\">&lt;/a&gt;</span>\n        <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"nt\">&lt;/section&gt;</span>\n</pre></div>\n\n\n<p>This will produce the following parsed JSON:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"h-card\"</span>\n      <span class=\"p\">],</span>\n      <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"photo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"http://desmondrivet.com/me02.png\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"Desmond Rivet\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"http://desmondrivet.com\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"uid\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"http://desmondrivet.com\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"email\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"mailto:desmond.rivet@gmail.com\"</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<h2>Onward!</h2>\n<p>At this point, I think I've covered most of what goes into a basic\nIndieWeb-enabled website.</p>\n<p>That doesn't mean, of course, that there isn't more to write, but most of\nthe topics from here on out will probably be a bit more specific to my\nsituation.</p>\n<p>For example, this site is built using <a href=\"https://blog.getpelican.com/\">Pelican</a>, a static site generator\nbased on <a href=\"https://www.python.org/\">Python</a>, and there are a whole <em>batch</em> of issues that crop up\nwhen you try to integrate certain IndieWeb features with <em>that</em> combination.\nI would be remiss if I didn't write about them, but we'll see.</p>\n<p>Anyway, thanks for reading this far!  I hope to see you around!</p>\n<a href=\"https://brid.gy/publish/twitter\"></a>", "value": "If you've read my previous articles on the IndieWeb, you might be forgiven for thinking that its members are, by and large, loners who keep to themselves.\nConsider the concept of a \"like\", for example. On a site like Twitter, a like is an action you perform against another person's content; you click the heart icon next to someone's tweet, and the like counter for that tweet goes up. It's an implicit connection between two people - the one who did the liking and the one who received it.\nAn IndieWeb \"like\", on the other hand, is not an action you perform on someone's content, but rather a standalone post that you own and publish to your site. It's a reversal of the way people usually think about the transaction, and it reflects the premium IndieWeb members place on controlling their own content.\nNotably, in the simplest version of this scheme, the person who's post was liked - the likee, I guess? - might not even be aware that anything has happened at all. I mean, how would they? The entire interaction was wholly contained on another site.\nWhich is all well and good but also a little...boring? Calling the IndieWeb a \"social network\" seems like a bit of stretch when you don't even know how many people liked your post. What's the point of it all if you don't get to see a little heart counter going up?\nThe problem becomes more obvious when one realizes that the IndieWeb does not prescribe the use of any particular blogging software or, indeed, any particular publishing technology at all (other than the standard machinery of the web, like HTTP, HTML and CSS), so how exactly would one be able to even recognize that a piece of content on someone's website was a \"post\" that could be \"replied to\" or \"liked\" at all?\nOf course, we wouldn't get very far if the IndieWeb community didn't have answers to these questions.How To Build a Decentralized Social Network\nIt's been said that the IndieWeb is what a social network looks like when it's built on top of the web itself, but what exactly does this mean?\nIf you're a software developer, you've heard of REST. It's a software architecture style defined in terms of distributed web resources (uniquely identified by URLs) and a small number of predefined actions or verbs that can be applied to those web resources - the same verbs, not coincidentally, defined by HTTP (GET, POST, PUT, DELETE, etc). The REST style is used extensively to provide access to distributed web-based data resources, often formatted as JSON.\nRoy Fielding is usually credited as the person who \"invented\" REST, but that's not quite true. It would be more accurate to say that he documented a pre-existing architecture style - namely the one used by the classic world wide web. The entire web is the prototypical REST system par excellence in this formulation, with hyperlinked HTML documents being the prototypical web resources.\nI'm not personally accustomed to viewing the web in this fashion, because I'm more accustomed to thinking of RESTful services as providing access to data resources, not HTML pages, and I would argue that the distinction is more than just semantics. Data resources, in my mind, have a regular, predictable structure that HTML pages lack. Data resources represent things like books and appointments and people and blog posts while HTML pages are just...pages. They are primarily meant to be rendered in a browser and viewed by human beings and extracting any kind of structured data from them, while not impossible, tends to be tricky.\nAnd this puts the IndieWeb in a bit of bind. The IndieWeb's basic unit of communication is the post and posts live on websites and websites consist of HTML pages and HTML pages, as I've already said, are not structured data resources. So, how does one (programatically) extract a post from a website that one has never visited before? How does one distinguish notes from articles and likes? These are questions that are readily answered if you're designing a private, walled social network, because you get to design the data resources from the ground up. You get to decide what a post looks like, and the web resources involved in modelling one. It's a lot harder to do when you have to somehow extract that information in a predictable manner from the chaotic tag soup that forms the majority of personal websites.Enter Microformats\nSo what can you do? What exactly does a post look like on the IndieWeb? Finally we come to the answer, and it requires knowledge about a subject called microformats.\nMicroformats are basically just specialized CSS classes added to your HTML content in order to give consumers some idea of what that content represents. They are effectively the API of the IndieWeb. Different kinds of posts can be represented with different combinations of microformats.\nA standard blog entry (an article, in IndieWeb parlance), might look like this, for example:<div class=\"h-entry\">\n    <h1 class=\"p-name\">Awesome Title<h1>\n    <div class=\"e-content\">\n        This is a pretty good blog entry\n    </div>\n</div>\n\nThe \"h-entry\" CSS class identifies the whole div as a generic post. The \"p-name\" class identifies the h1 tag as the title of the post and the \"e-content\" class represents the article content itself. We know this is a blog entry because of the title; blog entries are really nothing more then self-contained, standalone pieces of content with titles.\n(If you're curious about why microformat classes start with a certain letter, like h or p, you should read the standard. The specifics, while interesting, are not germane to this discussion).\nA note (the IndieWeb equivalent of a tweet) looks more or less the same as an article, but lacks a title:<div class=\"h-entry\">\n    <div class=\"e-content\">\n        This is a pretty good note\n    </div>\n</div>\n\nIndieWeb reply posts are basically just notes with extra information to give the reply some context:<div class=\"h-entry\">\n    <a class=\"u-in-reply-to\" href=\"http://elsewhere.com/posts/1234\">\n    <div class=\"e-content\">\n        This is a pretty good reply\n    </div>\n</div>\n\nNote the telltale \"u-in-reply-to\" URL, which identifies this post as a reply, and points to the post that this reply is about.\nAn IndieWeb like is very similar to an IndieWeb reply, but uses the \"u-like-of\" class instead of the \"u-in-reply-to\" class:<div class=\"h-entry\">\n    <a class=\"u-like-of\" href=\"http://elsewhere.com/posts/1234\">\n    <div class=\"e-content\">\n        This is a pretty good like\n    </div>\n</div>\n\nThough likes can contain content of their own, they often don't, so they can often be as simple as this:<div class=\"h-entry\">\n    <a class=\"u-like-of\" href=\"http://elsewhere.com/posts/1234\">\n</div>\n From Microformats to JSON\nOnce you embed your posts with microformats, how does a 3rd party make use of the information? They do it with a microformat parser. Microformat parsers function by reading the special microformat classes from an HTML document and producing a canonical JSON representation of the extracted data. So, for example, this markup:<div class=\"h-entry\">\n    <h1 class=\"p-name\">Awesome Title<h1>\n    <div class=\"e-content\">\n        This is a pretty good blog entry\n    </div>\n</div>\n\nwill produce this JSON:{\n  \"items\": [\n    {\n      \"type\": [\n        \"h-entry\"\n      ],\n      \"properties\": {\n        \"name\": [\n          \"Awesome Title\"\n        ],\n        \"content\": [\n          {\n            \"value\": \"This is a pretty good blog entry\",\n          }\n        ]\n      }\n    }\n  ]\n}\n\naccording to rules defined by the standard.\nBear in mind that any HTML element without an associated microformatted class is effectively ignored by a microformat parser, so a post that looks like this:<article class=\"h-entry\">\n    <div class=\"something-weird\">\n        This isn't really part of the content\n    </div>\n    <h1 class=\"p-name\">Awesome Title<h1>\n    <span class=\"wrap\">Something else here</span>\n    <div class=\"e-content\">\n        This is a pretty good blog entry\n    </div>\n    <footer>\n       This is an awesome footer\n    </footer>\n</article>\n\nwill produce exactly the same JSON as the post above.\nIn other words, microformats are basically a way of embedding structured data into an unstructured HTML page. Effectively, microformats allow a vanilla, free form personal website to double as a RESTful data service.\nI'll say this again, because I think it's kind of cool: microformats transform a plain, vanilla, HTML-based personal website into a RESTful data service.\nI feel like Roy Fielding would be proud.Counting Hearts\nThe process of liking a post on the IndieWeb, as I alluded to before, might seem like a very one-sided activity. The liker publishes a special post on their own site which represents the \"like\" and that's pretty much that. The likee isn't really involved in the procedure.\nExcept, of course, that if this were actually true, the IndieWeb web wouldn't be much of a social network. So how exactly do you know how many people liked your post?\nThe answer involves a concept called webmentions. A webmention is a way of notifying a website that another website has linked to it in some fashion. The basic operation is as follows: Bob writes an article which links to an article on Alice's website. Bob publishes his article, and he (or the software he uses) sends a webmention to an endpoint on Alice's domain, informing her that her article was mentioned in Bob's post. Alice's endpoint does something with this information (perhaps recording the fact in a database, for example).\nThe webmention protocol is remarkably spare; the payload basically contains nothing but the source URL (doing the mentioning) and the target URL (being mentioned). Notably absent is any sort of information about what kind of post is doing the mentioning. Bob's post could have liked Alice's article, or it could have replied to it, or it could have just randomly linked to it; the webmention payload is silent on the subject.\nInformation about the post which sent the webmention must obtained by actually reading the post via the source URL, parsing its microformats, and confirming that the target URL actually appears somewhere in its contents. These extra steps function as form of validation; a valid webmention must be backed by a real, published post or it will be summarily rejected. This step also allows the consumer of the source post to classify it according to its microformats. This is ultimately how one implements things such as like counters and comments on an IndieWeb site.Here's My Card\nWebmentions allow a website to know when a person has linked to your post and a further check can determine the nature of link (was it a like? A reply? A repost?). Notably missing from the ongoing discussion is a crucial piece of the puzzle, namely the identity of the person doing the linking.\nOf course, what we do know is the website that did the linking, and if you've read my previous article on the subject, you know that one's domain is basically one's identity on the IndieWeb, so we're halfway there. But if you've used a service like Twitter, you know that this isn't really enough; one's personal domain is akin to one's Twitter handle, and although such information is crucial, it's usually augmented with things like a name and an avatar. How do you provide things like that on the IndieWeb?\nThe answer, once again, is microformats, but this time it's not an h-entry on which we'll focus but rather a new class called an h-card. The h-card microformat functions roughly like an online business card; it's way of attaching personal information, like your name, email address and photo, to your personal domain. A properly embedded h-card becomes especially important when you want your personal information to appear correctly in a context other than your own website - for example, when posting likes and replies that you want displayed on other websites.\nEmbedding an h-card in your posts is not difficult:<div class=\"h-entry\">\n    <a class=\"p-author h-card\" href=\"http://example.com\">Joe Bloggs</a>\n    <h1 class=\"p-name\">Awesome Title<h1>\n    <div class=\"e-content\">\n        This is a pretty good blog entry\n    </div>\n</div>\n\nAs you might expect, the p-author class tells a consumer who the author of the post is, but it's the h-card class which tells you the format of that information. This is a very minimal example, making use of a concept called implied properties, which allows parsers to infer certain pieces of data from the structure of the tags. The result of parsing the h-card, in this case, will look like this:{\n  \"items\": [\n    {\n      \"type\": [\n        \"h-card\"\n      ],\n      \"properties\": {\n        \"name\": [\n          \"Joe Bloggs\"\n        ],\n        \"url\": [\n          \"http://example.com\"\n        ]\n      }\n    }\n  ]\n}\n\nAs you can see, the url attribute is inferred from the fact that the h-card is combined with an anchor tag, and the name attribute is inferred from the contents of the tag.\nYou can choose to be more specific with your h-cards:<div class=\"h-entry\">\n    <p class=\"h-card\">\n        <img class=\"u-photo\" src=\"http://example.org/photo.png\" alt=\"\" />\n        <a class=\"p-name u-url\" href=\"http://example.org\">Joe Bloggs</a>\n        <a class=\"u-email\" href=\"mailto:joebloggs@example.com\">joebloggs@example.com</a>, \n    </p>\n    <h1 class=\"p-name\">Awesome Title<h1>\n    <div class=\"e-content\">\n        This is a pretty good blog entry\n    </div>\n</div>\n\nThis results in the following parsed h-card:{\n  \"items\": [\n    {\n      \"type\": [\n        \"h-card\"\n      ],\n      \"properties\": {\n        \"photo\": [\n          \"http://example.org/photo.png\"\n        ],\n        \"name\": [\n          \"Joe Bloggs\"\n        ],\n        \"url\": [\n          \"http://example.org\"\n        ],\n        \"email\": [\n          \"mailto:joebloggs@example.com\"\n        ],\n      }\n    }\n  ]\n}\n\nYou can also choose to maintain a canonical or representative h-card which represents your homepage. You do this by: Adding an h-card to your homepage Making sure that your homepage h-card contains a u-uid attribute to represent the page itself.\nMy representative h-card on my homepage looks like this, for example:<section class=\"h-card\">\n    <ul>\n        <li>\n            <img class=\"u-photo\" src=\"/me02.jpg\"/>\n        </li>\n        <li>\n            <a class=\"p-name u-url u-uid\" \n                href=\"https://desmondrivet.com\">Desmond Rivet</a>\n        </li>\n        <li>\n            <a class=\"u-email\"\n               href=\"mailto:desmond.rivet@gmail.com\">desmond.rivet@gmail.com</a>\n        </li>\n    </ul>\n</section>\n\nThis will produce the following parsed JSON:{\n  \"items\": [\n    {\n      \"type\": [\n        \"h-card\"\n      ],\n      \"properties\": {\n        \"photo\": [\n          \"http://desmondrivet.com/me02.png\"\n        ],\n        \"name\": [\n          \"Desmond Rivet\"\n        ],\n        \"url\": [\n          \"http://desmondrivet.com\"\n        ],\n        \"uid\": [\n          \"http://desmondrivet.com\"\n        ],\n        \"email\": [\n          \"mailto:desmond.rivet@gmail.com\"\n        ],\n      }\n    }\n  ]\n}\n Onward!\nAt this point, I think I've covered most of what goes into a basic IndieWeb-enabled website.\nThat doesn't mean, of course, that there isn't more to write, but most of the topics from here on out will probably be a bit more specific to my situation.\nFor example, this site is built using Pelican, a static site generator based on Python, and there are a whole batch of issues that crop up when you try to integrate certain IndieWeb features with that combination. I would be remiss if I didn't write about them, but we'll see.\nAnyway, thanks for reading this far! I hope to see you around!"}], "category": ["indieweb"]}}], "rels": {"icon": ["https://desmondrivet.com/me_200x200.jpg"], "stylesheet": ["https://desmondrivet.com/theme/css/bootstrap.min.css", "https://desmondrivet.com/theme/fontawesome/css/all.min.css", "https://desmondrivet.com/theme/css/pygments/native.css", "https://desmondrivet.com/theme/css/style.css", "https://desmondrivet.com/static/custom.css", "https://fonts.googleapis.com/css?family=Josefin+Slab|Lato|Old+Standard+TT|Open+Sans|PT+Sans|PT+Serif|Roboto|Source+Sans+Pro|Oxygen"], "alternate": ["https://desmondrivet.com/feeds/all.rss"], "authorization_endpoint": ["https://indieauth.com/auth"], "token_endpoint": ["https://tokens.indieauth.com/token"], "micropub": ["https://micropub.desmondrivet.com"], "microsub": ["https://aperture.p3k.io/microsub/463"], "webmention": ["https://webmention.desmondrivet.com"], "feed": ["https://desmondrivet.com/all"], "me": ["http://www.facebook.com/desmond.rivet", "https://www.instagram.com/thegreatdesmondo/", "http://www.twitter.com/desmondrivet", "https://github.com/drivet", "http://ca.linkedin.com/in/desmondrivet"]}, "rel-urls": {"https://desmondrivet.com/me_200x200.jpg": {"text": "", "rels": ["icon"]}, "https://desmondrivet.com/theme/css/bootstrap.min.css": {"text": "", "rels": ["stylesheet"], "type": "text/css"}, "https://desmondrivet.com/theme/fontawesome/css/all.min.css": {"text": "", "rels": ["stylesheet"]}, "https://desmondrivet.com/theme/css/pygments/native.css": {"text": "", "rels": ["stylesheet"]}, "https://desmondrivet.com/theme/css/style.css": {"text": "", "rels": ["stylesheet"], "type": "text/css"}, "https://desmondrivet.com/static/custom.css": {"text": "", "rels": ["stylesheet"]}, "https://fonts.googleapis.com/css?family=Josefin+Slab|Lato|Old+Standard+TT|Open+Sans|PT+Sans|PT+Serif|Roboto|Source+Sans+Pro|Oxygen": {"text": "", "rels": ["stylesheet"]}, "https://desmondrivet.com/feeds/all.rss": {"text": "", "rels": ["alternate"], "type": "application/rss+xml", "title": "Desmond Rivet RSS Feed"}, "https://indieauth.com/auth": {"text": "", "rels": ["authorization_endpoint"]}, "https://tokens.indieauth.com/token": {"text": "", "rels": ["token_endpoint"]}, "https://micropub.desmondrivet.com": {"text": "", "rels": ["micropub"]}, "https://aperture.p3k.io/microsub/463": {"text": "", "rels": ["microsub"]}, "https://webmention.desmondrivet.com": {"text": "", "rels": ["webmention"]}, "https://desmondrivet.com/all": {"text": "", "rels": ["feed"], "type": "text/html"}, "http://www.facebook.com/desmond.rivet": {"text": "", "rels": ["me"], "title": "Facebook"}, "https://www.instagram.com/thegreatdesmondo/": {"text": "", "rels": ["me"], "title": "Instagram"}, "http://www.twitter.com/desmondrivet": {"text": "", "rels": ["me"], "title": "Twitter"}, "https://github.com/drivet": {"text": "", "rels": ["me"], "title": "Github"}, "http://ca.linkedin.com/in/desmondrivet": {"text": "", "rels": ["me"], "title": "LinkedIn"}}, "debug": {"description": "mf2py - microformats2 parser for python", "source": "https://github.com/microformats/mf2py", "version": "1.1.2", "markup parser": "html5lib"}, "alternates": [{"url": "https://desmondrivet.com/feeds/all.rss", "text": "", "type": "application/rss+xml", "title": "Desmond Rivet RSS Feed"}]}}